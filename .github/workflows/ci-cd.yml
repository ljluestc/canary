name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r task-manager/requirements.txt
        pip install -r task-master/requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-xdist
        pip install flake8 black isort mypy
        pip install psutil
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check --diff .
    
    - name: Import sort check with isort
      run: |
        isort --check-only --diff .
    
    - name: Type check with mypy
      run: |
        mypy . --ignore-missing-imports
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short --cov=task_manager --cov=task_master --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Run comprehensive test suite
      run: |
        python test_comprehensive.py
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r task-manager/requirements.txt
        pip install -r task-master/requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-xdist
        pip install psutil
    
    - name: Run integration tests
      run: |
        python -m pytest tests/test_integration.py -v --tb=short --cov=task_manager --cov=task_master --cov-report=xml
    
    - name: Run end-to-end tests
      run: |
        python -m pytest tests/test_e2e.py -v --tb=short --cov=task_manager --cov=task_master --cov-report=xml

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r task-manager/requirements.txt
        pip install -r task-master/requirements.txt
        pip install pytest pytest-benchmark psutil
    
    - name: Run performance tests
      run: |
        python -m pytest tests/ -v --benchmark-only --benchmark-sort=mean

  security-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r task-manager/requirements.txt
        pip install -r task-master/requirements.txt
        pip install bandit safety
    
    - name: Run security tests with bandit
      run: |
        bandit -r . -f json -o bandit-report.json
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, integration-test, performance-test, security-test, playwright-e2e]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r task-manager/requirements.txt
        pip install -r task-master/requirements.txt
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here

  coverage-report:
    runs-on: ubuntu-latest
    needs: [test, integration-test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r task-manager/requirements.txt
        pip install -r task-master/requirements.txt
        pip install pytest pytest-cov

    - name: Generate coverage report
      run: |
        python -m pytest tests/ --cov=task_manager --cov=task_master --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

  playwright-e2e:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      fail-fast: false
      matrix:
        project:
          - name: yaappintro
            path: ../yaappintro
          - name: visualgo
            path: ../visualgo

    steps:
    - uses: actions/checkout@v4
      with:
        path: canary

    - name: Checkout ${{ matrix.project.name }}
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/${{ matrix.project.name }}
        path: ${{ matrix.project.name }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.project.name }}/package-lock.json

    - name: Install dependencies
      working-directory: ${{ matrix.project.name }}
      run: npm ci

    - name: Install Playwright browsers
      working-directory: ${{ matrix.project.name }}
      run: npx playwright install --with-deps

    - name: Run Playwright tests
      working-directory: ${{ matrix.project.name }}
      run: npm run test:e2e
      env:
        CI: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: playwright-results-${{ matrix.project.name }}
        path: |
          ${{ matrix.project.name }}/playwright-report/
          ${{ matrix.project.name }}/test-results/
        retention-days: 30

    - name: Check test results (100% pass gate)
      if: failure()
      run: |
        echo "‚ùå Playwright E2E tests failed for ${{ matrix.project.name }}"
        echo "All E2E tests must pass to proceed with deployment."
        exit 1