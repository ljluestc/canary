name: Comprehensive System Testing and Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Comprehensive Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        system: [
          'task-manager',
          'task-master',
          'systems/tinyurl',
          'systems/newsfeed',
          'systems/google-docs'
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 redis-server
        
    - name: Start Redis
      run: |
        sudo systemctl start redis-server
        sudo systemctl enable redis-server
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov coverage flake8 black
        
    - name: Install system-specific dependencies
      run: |
        cd ${{ matrix.system }}
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
    - name: Run linting
      run: |
        cd ${{ matrix.system }}
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        
    - name: Run tests with coverage
      run: |
        cd ${{ matrix.system }}
        python -m pytest test_*.py -v --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ${{ matrix.system }}/coverage.xml
        flags: ${{ matrix.system }}
        name: ${{ matrix.system }}-coverage
        
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.system }}
        path: ${{ matrix.system }}/htmlcov/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov requests
        
    - name: Start services
      run: |
        # Start Redis
        sudo systemctl start redis-server
        
        # Start TinyURL service
        cd systems/tinyurl
        python tinyurl_service.py &
        TINYURL_PID=$!
        echo $TINYURL_PID > /tmp/tinyurl.pid
        
        # Start Newsfeed service
        cd ../newsfeed
        python newsfeed_service.py &
        NEWSFEED_PID=$!
        echo $NEWSFEED_PID > /tmp/newsfeed.pid
        
        # Start Google Docs service
        cd ../google-docs
        python google_docs_service.py &
        DOCS_PID=$!
        echo $DOCS_PID > /tmp/docs.pid
        
        # Wait for services to start
        sleep 10
        
    - name: Run integration tests
      run: |
        python -m pytest integration_tests/ -v
        
    - name: Stop services
      if: always()
      run: |
        if [ -f /tmp/tinyurl.pid ]; then
          kill $(cat /tmp/tinyurl.pid) || true
        fi
        if [ -f /tmp/newsfeed.pid ]; then
          kill $(cat /tmp/newsfeed.pid) || true
        fi
        if [ -f /tmp/docs.pid ]; then
          kill $(cat /tmp/docs.pid) || true
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        pip install bandit safety semgrep
        
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Run Semgrep scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install pytest pytest-benchmark locust
        
    - name: Run performance tests
      run: |
        python run_comprehensive_tests.py --performance-only
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance_report.json

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push TinyURL service
      run: |
        cd systems/tinyurl
        docker build -t ${{ secrets.DOCKER_USERNAME }}/tinyurl-service:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/tinyurl-service:latest
        
    - name: Build and push Newsfeed service
      run: |
        cd systems/newsfeed
        docker build -t ${{ secrets.DOCKER_USERNAME }}/newsfeed-service:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/newsfeed-service:latest
        
    - name: Build and push Google Docs service
      run: |
        cd systems/google-docs
        docker build -t ${{ secrets.DOCKER_USERNAME }}/google-docs-service:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/google-docs-service:latest
        
    - name: Deploy to Kubernetes
      run: |
        # Set up kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/
        
    - name: Run health checks
      run: |
        # Wait for deployments to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/tinyurl-service
        kubectl wait --for=condition=available --timeout=300s deployment/newsfeed-service
        kubectl wait --for=condition=available --timeout=300s deployment/google-docs-service
        
        # Run health checks
        kubectl get pods
        kubectl get services

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan, performance-test, build-and-deploy]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main' && needs.build-and-deploy.result == 'success'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Comprehensive System Release
          
          This release includes:
          - ✅ All systems tested with 100% coverage
          - ✅ Integration tests passed
          - ✅ Security scans completed
          - ✅ Performance benchmarks met
          - ✅ Docker images built and deployed
          
          ### Systems Included:
          - TinyURL Service
          - Newsfeed Service  
          - Google Docs Service
          - Task Manager
          - Task Master
        draft: false
        prerelease: false
